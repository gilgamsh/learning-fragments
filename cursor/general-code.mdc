---
description: important for code
globs: 
alwaysApply: false
---
# General Code Style Guidelines

## Core Principles
- Write self-documenting code with minimal inline comments
- Focus on code clarity and expressiveness
- Use semantic naming conventions
- Prioritize maintainability over cleverness
- Follow the principle of least surprise

## Language Requirements
- All code and comments must be written in English
- Communication with developers can be in Chinese (中文)
- No Chinese characters allowed in code or comments

## Naming Conventions
- Use camelCase for variables and functions 
- Use UPPERCASE_SNAKE_CASE for constants
- Avoid abbreviations unless they are widely understood (e.g., `id`, `url`)
- Use plural names for arrays (e.g., `users`, `items`)

## Code Formatting
- Maintain consistent indentation (2 or 4 spaces as per project standard)
- Limit line length to 80-100 characters
- Use whitespace to improve readability
- Group related code blocks and separate unrelated sections with blank lines
- Place opening braces on the same line as control statements
- Use semicolons consistently (either always or never)

## Error Handling
- Never silently catch errors without proper handling
- Use specific error types rather than generic exceptions
- Include meaningful error messages
- Log errors with appropriate context information
- Implement proper error recovery strategies where possible

## Implementation Guidelines
- Choose descriptive variable and function names that explain their purpose
- Structure code in a way that makes its intent clear
- Break down complex operations into well-named functions
- Use comments only when code clarity alone is insufficient
- Follow the Single Responsibility Principle for functions and classes
- Avoid nested conditionals deeper than 2-3 levels
- Limit function length to enhance readability (aim for < 30 lines)
- Use pure functions where possible
- Avoid magic numbers and strings; use named constants instead

## Documentation
- Document public APIs with clear parameters and return values
- Include examples for complex or non-obvious functionality
- Keep documentation updated when code changes
- Document architectural decisions and patterns in separate files

## Testing
- Write unit tests for all important logic
- Aim for meaningful test coverage rather than arbitrary percentages
- Use descriptive test names that explain the expected behavior
- Structure tests in Arrange-Act-Assert pattern
- Mock external dependencies appropriately

## Version Control
- Write clear, concise commit messages
- Keep commits focused on a single logical change
- Reference issue/ticket numbers in commit messages when applicable
- Review code before submitting pull requests

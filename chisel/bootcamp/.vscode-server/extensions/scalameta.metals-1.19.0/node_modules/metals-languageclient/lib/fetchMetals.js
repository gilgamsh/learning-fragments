"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calcServerDependency = exports.fetchMetals = void 0;
const semver = __importStar(require("semver"));
const promisify_child_process_1 = require("promisify-child-process");
function fetchMetals({ serverVersion, serverProperties, javaConfig: { javaPath, javaOptions, extraEnv, coursierPath }, }) {
    const fetchProperties = serverProperties.filter((p) => !p.startsWith("-agentlib"));
    const serverDependency = calcServerDependency(serverVersion);
    return promisify_child_process_1.spawn(javaPath, [
        ...javaOptions,
        ...fetchProperties,
        "-Dfile.encoding=UTF-8",
        "-jar",
        coursierPath,
        "fetch",
        "-p",
        "--ttl",
        // Use infinite ttl to avoid redunant "Checking..." logs when using SNAPSHOT
        // versions. Metals SNAPSHOT releases are effectively immutable since we
        // never publish the same version twice.
        "Inf",
        serverDependency,
        "-r",
        "bintray:scalacenter/releases",
        "-r",
        "sonatype:public",
        "-r",
        "sonatype:snapshots",
        "-p",
    ], {
        env: Object.assign(Object.assign({ COURSIER_NO_TERM: "true" }, extraEnv), process.env),
        stdio: ["ignore"],
    });
}
exports.fetchMetals = fetchMetals;
function calcServerDependency(serverVersion) {
    if (serverVersion.includes(":")) {
        return serverVersion;
    }
    else {
        const use213 = semver.gt(serverVersion, "0.11.2") ||
            (serverVersion.startsWith("0.11.2") &&
                serverVersion.endsWith("SNAPSHOT"));
        const binaryVersion = use213 ? "2.13" : "2.12";
        return `org.scalameta:metals_${binaryVersion}:${serverVersion}`;
    }
}
exports.calcServerDependency = calcServerDependency;

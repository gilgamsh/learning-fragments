import { exec } from 'child_process';
import commonFindJavaHome from './common';
/**
 * Uses the Mac's java_home utility to find an appropriate version of Java.
 */
export default function macFindJavaHome() {
    return Promise.all([commonFindJavaHome(), useMacsJavaHomeUtility()])
        .then(res => {
        // combine the results:
        return {
            homes: res[0].concat(res[1].homes),
            executableExtension: res[1].executableExtension
        };
    });
}
function useMacsJavaHomeUtility() {
    return new Promise(resolve => {
        exec('/usr/libexec/java_home -V', (err, stdout, stderr) => {
            /*
              Output example, which java_home prints to stderr [!]:
              Matching Java Virtual Machines (4):
                1.8.0_60, x86_64:	"Java SE 8"	/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home
                1.7.0_79, x86_64:	"Java SE 7"	/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home
                1.6.0_65-b14-468, x86_64:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
                1.6.0_65-b14-468, i386:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
             */
            // Ditch boilerplate first line, and trim ending newlines.
            let installations = stderr.toString().trim().split('\n').slice(1);
            // Map to paths.
            // TODO: We assume that quotes cannot be in the paths.
            installations = installations.map((install) => install.slice(install.lastIndexOf('"') + 1).trim());
            resolve({ homes: installations });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyd2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvbGliL3BsYXRmb3Jtcy9kYXJ3aW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuQyxPQUFPLGtCQUFrQixNQUFNLFVBQVUsQ0FBQztBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxPQUFPLFVBQVUsZUFBZTtJQUNyQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQztTQUNqRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDVix1QkFBdUI7UUFDdkIsT0FBTztZQUNMLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbEMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtTQUNoRCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsU0FBUyxzQkFBc0I7SUFDN0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMzQixJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxHQUFpQixFQUFFLE1BQXVCLEVBQUUsTUFBdUIsRUFBRSxFQUFFO1lBQ3hHOzs7Ozs7O2VBT0c7WUFDSCwwREFBMEQ7WUFDMUQsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEUsZ0JBQWdCO1lBQ2hCLHNEQUFzRDtZQUN0RCxhQUFhLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFFbkcsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFFLGFBQWEsRUFBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2V4ZWN9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtJTG9jYXRlSmF2YUhvbWVSZXN1bHR9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IGNvbW1vbkZpbmRKYXZhSG9tZSBmcm9tICcuL2NvbW1vbic7XG5cbi8qKlxuICogVXNlcyB0aGUgTWFjJ3MgamF2YV9ob21lIHV0aWxpdHkgdG8gZmluZCBhbiBhcHByb3ByaWF0ZSB2ZXJzaW9uIG9mIEphdmEuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hY0ZpbmRKYXZhSG9tZSgpOiBQcm9taXNlPElMb2NhdGVKYXZhSG9tZVJlc3VsdD4ge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoW2NvbW1vbkZpbmRKYXZhSG9tZSgpLCB1c2VNYWNzSmF2YUhvbWVVdGlsaXR5KCldKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAvLyBjb21iaW5lIHRoZSByZXN1bHRzOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG9tZXM6IHJlc1swXS5jb25jYXQocmVzWzFdLmhvbWVzKSxcbiAgICAgICAgZXhlY3V0YWJsZUV4dGVuc2lvbjogcmVzWzFdLmV4ZWN1dGFibGVFeHRlbnNpb25cbiAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZU1hY3NKYXZhSG9tZVV0aWxpdHkoKTogUHJvbWlzZTxJTG9jYXRlSmF2YUhvbWVSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGV4ZWMoJy91c3IvbGliZXhlYy9qYXZhX2hvbWUgLVYnLCAoZXJyOiBFcnJvciB8IG51bGwsIHN0ZG91dDogQnVmZmVyIHwgc3RyaW5nLCBzdGRlcnI6IEJ1ZmZlciB8IHN0cmluZykgPT4ge1xuICAgICAgLypcbiAgICAgICAgT3V0cHV0IGV4YW1wbGUsIHdoaWNoIGphdmFfaG9tZSBwcmludHMgdG8gc3RkZXJyIFshXTpcbiAgICAgICAgTWF0Y2hpbmcgSmF2YSBWaXJ0dWFsIE1hY2hpbmVzICg0KTpcbiAgICAgICAgICAxLjguMF82MCwgeDg2XzY0Olx0XCJKYXZhIFNFIDhcIlx0L0xpYnJhcnkvSmF2YS9KYXZhVmlydHVhbE1hY2hpbmVzL2pkazEuOC4wXzYwLmpkay9Db250ZW50cy9Ib21lXG4gICAgICAgICAgMS43LjBfNzksIHg4Nl82NDpcdFwiSmF2YSBTRSA3XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy9qZGsxLjcuMF83OS5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAgIDEuNi4wXzY1LWIxNC00NjgsIHg4Nl82NDpcdFwiSmF2YSBTRSA2XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy8xLjYuMC5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAgIDEuNi4wXzY1LWIxNC00NjgsIGkzODY6XHRcIkphdmEgU0UgNlwiXHQvTGlicmFyeS9KYXZhL0phdmFWaXJ0dWFsTWFjaGluZXMvMS42LjAuamRrL0NvbnRlbnRzL0hvbWVcbiAgICAgICAqL1xuICAgICAgLy8gRGl0Y2ggYm9pbGVycGxhdGUgZmlyc3QgbGluZSwgYW5kIHRyaW0gZW5kaW5nIG5ld2xpbmVzLlxuICAgICAgbGV0IGluc3RhbGxhdGlvbnMgPSBzdGRlcnIudG9TdHJpbmcoKS50cmltKCkuc3BsaXQoJ1xcbicpLnNsaWNlKDEpO1xuICAgICAgLy8gTWFwIHRvIHBhdGhzLlxuICAgICAgLy8gVE9ETzogV2UgYXNzdW1lIHRoYXQgcXVvdGVzIGNhbm5vdCBiZSBpbiB0aGUgcGF0aHMuXG4gICAgICBpbnN0YWxsYXRpb25zID0gaW5zdGFsbGF0aW9ucy5tYXAoKGluc3RhbGwpID0+IGluc3RhbGwuc2xpY2UoaW5zdGFsbC5sYXN0SW5kZXhPZignXCInKSArIDEpLnRyaW0oKSk7XG5cbiAgICAgIHJlc29sdmUoe2hvbWVzOiBpbnN0YWxsYXRpb25zfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19
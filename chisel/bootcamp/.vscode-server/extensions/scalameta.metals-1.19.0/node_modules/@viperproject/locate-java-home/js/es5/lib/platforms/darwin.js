"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const common_1 = require("./common");
/**
 * Uses the Mac's java_home utility to find an appropriate version of Java.
 */
function macFindJavaHome() {
    return Promise.all([(0, common_1.default)(), useMacsJavaHomeUtility()])
        .then(res => {
        // combine the results:
        return {
            homes: res[0].concat(res[1].homes),
            executableExtension: res[1].executableExtension
        };
    });
}
exports.default = macFindJavaHome;
function useMacsJavaHomeUtility() {
    return new Promise(resolve => {
        (0, child_process_1.exec)('/usr/libexec/java_home -V', (err, stdout, stderr) => {
            /*
              Output example, which java_home prints to stderr [!]:
              Matching Java Virtual Machines (4):
                1.8.0_60, x86_64:	"Java SE 8"	/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home
                1.7.0_79, x86_64:	"Java SE 7"	/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home
                1.6.0_65-b14-468, x86_64:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
                1.6.0_65-b14-468, i386:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
             */
            // Ditch boilerplate first line, and trim ending newlines.
            let installations = stderr.toString().trim().split('\n').slice(1);
            // Map to paths.
            // TODO: We assume that quotes cannot be in the paths.
            installations = installations.map((install) => install.slice(install.lastIndexOf('"') + 1).trim());
            resolve({ homes: installations });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyd2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvbGliL3BsYXRmb3Jtcy9kYXJ3aW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUM7QUFFbkMscUNBQTBDO0FBRTFDOztHQUVHO0FBQ0gsU0FBd0IsZUFBZTtJQUNyQyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFBLGdCQUFrQixHQUFFLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNWLHVCQUF1QjtRQUN2QixPQUFPO1lBQ0wsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNsQyxtQkFBbUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CO1NBQ2hELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFURCxrQ0FTQztBQUVELFNBQVMsc0JBQXNCO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDM0IsSUFBQSxvQkFBSSxFQUFDLDJCQUEyQixFQUFFLENBQUMsR0FBaUIsRUFBRSxNQUF1QixFQUFFLE1BQXVCLEVBQUUsRUFBRTtZQUN4Rzs7Ozs7OztlQU9HO1lBQ0gsMERBQTBEO1lBQzFELElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xFLGdCQUFnQjtZQUNoQixzREFBc0Q7WUFDdEQsYUFBYSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBRW5HLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxhQUFhLEVBQUMsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtleGVjfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7SUxvY2F0ZUphdmFIb21lUmVzdWx0fSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCBjb21tb25GaW5kSmF2YUhvbWUgZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIFVzZXMgdGhlIE1hYydzIGphdmFfaG9tZSB1dGlsaXR5IHRvIGZpbmQgYW4gYXBwcm9wcmlhdGUgdmVyc2lvbiBvZiBKYXZhLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWNGaW5kSmF2YUhvbWUoKTogUHJvbWlzZTxJTG9jYXRlSmF2YUhvbWVSZXN1bHQ+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFtjb21tb25GaW5kSmF2YUhvbWUoKSwgdXNlTWFjc0phdmFIb21lVXRpbGl0eSgpXSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgLy8gY29tYmluZSB0aGUgcmVzdWx0czpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvbWVzOiByZXNbMF0uY29uY2F0KHJlc1sxXS5ob21lcyksXG4gICAgICAgIGV4ZWN1dGFibGVFeHRlbnNpb246IHJlc1sxXS5leGVjdXRhYmxlRXh0ZW5zaW9uXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VNYWNzSmF2YUhvbWVVdGlsaXR5KCk6IFByb21pc2U8SUxvY2F0ZUphdmFIb21lUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBleGVjKCcvdXNyL2xpYmV4ZWMvamF2YV9ob21lIC1WJywgKGVycjogRXJyb3IgfCBudWxsLCBzdGRvdXQ6IEJ1ZmZlciB8IHN0cmluZywgc3RkZXJyOiBCdWZmZXIgfCBzdHJpbmcpID0+IHtcbiAgICAgIC8qXG4gICAgICAgIE91dHB1dCBleGFtcGxlLCB3aGljaCBqYXZhX2hvbWUgcHJpbnRzIHRvIHN0ZGVyciBbIV06XG4gICAgICAgIE1hdGNoaW5nIEphdmEgVmlydHVhbCBNYWNoaW5lcyAoNCk6XG4gICAgICAgICAgMS44LjBfNjAsIHg4Nl82NDpcdFwiSmF2YSBTRSA4XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy9qZGsxLjguMF82MC5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAgIDEuNy4wXzc5LCB4ODZfNjQ6XHRcIkphdmEgU0UgN1wiXHQvTGlicmFyeS9KYXZhL0phdmFWaXJ0dWFsTWFjaGluZXMvamRrMS43LjBfNzkuamRrL0NvbnRlbnRzL0hvbWVcbiAgICAgICAgICAxLjYuMF82NS1iMTQtNDY4LCB4ODZfNjQ6XHRcIkphdmEgU0UgNlwiXHQvTGlicmFyeS9KYXZhL0phdmFWaXJ0dWFsTWFjaGluZXMvMS42LjAuamRrL0NvbnRlbnRzL0hvbWVcbiAgICAgICAgICAxLjYuMF82NS1iMTQtNDY4LCBpMzg2Olx0XCJKYXZhIFNFIDZcIlx0L0xpYnJhcnkvSmF2YS9KYXZhVmlydHVhbE1hY2hpbmVzLzEuNi4wLmpkay9Db250ZW50cy9Ib21lXG4gICAgICAgKi9cbiAgICAgIC8vIERpdGNoIGJvaWxlcnBsYXRlIGZpcnN0IGxpbmUsIGFuZCB0cmltIGVuZGluZyBuZXdsaW5lcy5cbiAgICAgIGxldCBpbnN0YWxsYXRpb25zID0gc3RkZXJyLnRvU3RyaW5nKCkudHJpbSgpLnNwbGl0KCdcXG4nKS5zbGljZSgxKTtcbiAgICAgIC8vIE1hcCB0byBwYXRocy5cbiAgICAgIC8vIFRPRE86IFdlIGFzc3VtZSB0aGF0IHF1b3RlcyBjYW5ub3QgYmUgaW4gdGhlIHBhdGhzLlxuICAgICAgaW5zdGFsbGF0aW9ucyA9IGluc3RhbGxhdGlvbnMubWFwKChpbnN0YWxsKSA9PiBpbnN0YWxsLnNsaWNlKGluc3RhbGwubGFzdEluZGV4T2YoJ1wiJykgKyAxKS50cmltKCkpO1xuXG4gICAgICByZXNvbHZlKHtob21lczogaW5zdGFsbGF0aW9uc30pO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==
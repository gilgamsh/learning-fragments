"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const common_1 = require("./common");
/**
 * Find Java in Linux using three methods:
 * - `update-java-alternatives`,
 */
function linuxFindJavaHome() {
    return Promise.all([(0, common_1.default)(), useUpdateJavaAlternatives()])
        .then(res => {
        // combine the results:
        return {
            homes: res[0].concat(res[1].homes),
            executableExtension: res[1].executableExtension
        };
    });
}
exports.default = linuxFindJavaHome;
function useUpdateJavaAlternatives() {
    return new Promise(resolve => {
        (0, child_process_1.exec)('update-java-alternatives -l', (err, stdout, stderr) => {
            const discoveredJavaHomes = [];
            // This returns error code 1 on success, for some reason.
            if (!err || err.code == 1) {
                const alts = stdout.toString().trim().split('\n');
                for (const alt of alts) {
                    // "java-1.7.0-openjdk-amd64 1071 /usr/lib/jvm/java-1.7.0-openjdk-amd64"
                    discoveredJavaHomes.push(alt.split(' ')[2]);
                }
            }
            resolve({ homes: discoveredJavaHomes });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cy9saWIvcGxhdGZvcm1zL2xpbnV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQW1DO0FBRW5DLHFDQUEwQztBQUUxQzs7O0dBR0c7QUFDSCxTQUF3QixpQkFBaUI7SUFDdkMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBQSxnQkFBa0IsR0FBRSxFQUFFLHlCQUF5QixFQUFFLENBQUMsQ0FBQztTQUNwRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDVix1QkFBdUI7UUFDdkIsT0FBTztZQUNMLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDbEMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtTQUNoRCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBVEQsb0NBU0M7QUFFRCxTQUFTLHlCQUF5QjtJQUNoQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzNCLElBQUEsb0JBQUksRUFBQyw2QkFBNkIsRUFBRSxDQUFDLEdBQWlCLEVBQUUsTUFBdUIsRUFBRSxNQUF1QixFQUFFLEVBQUU7WUFDMUcsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7WUFDekMseURBQXlEO1lBQ3pELElBQUksQ0FBQyxHQUFHLElBQVUsR0FBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQ2hDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xELEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO29CQUN0Qix3RUFBd0U7b0JBQ3hFLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzdDO2FBQ0Y7WUFDRCxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsbUJBQW1CLEVBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtleGVjfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7SUxvY2F0ZUphdmFIb21lUmVzdWx0fSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCBjb21tb25GaW5kSmF2YUhvbWUgZnJvbSAnLi9jb21tb24nO1xuXG4vKipcbiAqIEZpbmQgSmF2YSBpbiBMaW51eCB1c2luZyB0aHJlZSBtZXRob2RzOlxuICogLSBgdXBkYXRlLWphdmEtYWx0ZXJuYXRpdmVzYCxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGludXhGaW5kSmF2YUhvbWUoKTogUHJvbWlzZTxJTG9jYXRlSmF2YUhvbWVSZXN1bHQ+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFtjb21tb25GaW5kSmF2YUhvbWUoKSwgdXNlVXBkYXRlSmF2YUFsdGVybmF0aXZlcygpXSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgLy8gY29tYmluZSB0aGUgcmVzdWx0czpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvbWVzOiByZXNbMF0uY29uY2F0KHJlc1sxXS5ob21lcyksXG4gICAgICAgIGV4ZWN1dGFibGVFeHRlbnNpb246IHJlc1sxXS5leGVjdXRhYmxlRXh0ZW5zaW9uXG4gICAgICB9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VVcGRhdGVKYXZhQWx0ZXJuYXRpdmVzKCk6IFByb21pc2U8SUxvY2F0ZUphdmFIb21lUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBleGVjKCd1cGRhdGUtamF2YS1hbHRlcm5hdGl2ZXMgLWwnLCAoZXJyOiBFcnJvciB8IG51bGwsIHN0ZG91dDogQnVmZmVyIHwgc3RyaW5nLCBzdGRlcnI6IEJ1ZmZlciB8IHN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZGlzY292ZXJlZEphdmFIb21lczogc3RyaW5nW10gPSBbXTtcbiAgICAgIC8vIFRoaXMgcmV0dXJucyBlcnJvciBjb2RlIDEgb24gc3VjY2VzcywgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgaWYgKCFlcnIgfHwgKDxhbnk+ZXJyKS5jb2RlID09IDEpIHtcbiAgICAgICAgY29uc3QgYWx0cyA9IHN0ZG91dC50b1N0cmluZygpLnRyaW0oKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAoY29uc3QgYWx0IG9mIGFsdHMpIHtcbiAgICAgICAgICAvLyBcImphdmEtMS43LjAtb3Blbmpkay1hbWQ2NCAxMDcxIC91c3IvbGliL2p2bS9qYXZhLTEuNy4wLW9wZW5qZGstYW1kNjRcIlxuICAgICAgICAgIGRpc2NvdmVyZWRKYXZhSG9tZXMucHVzaChhbHQuc3BsaXQoJyAnKVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc29sdmUoe2hvbWVzOiBkaXNjb3ZlcmVkSmF2YUhvbWVzfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19
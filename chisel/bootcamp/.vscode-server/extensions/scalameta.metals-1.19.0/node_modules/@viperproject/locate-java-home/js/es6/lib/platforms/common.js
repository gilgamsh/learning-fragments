// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Copyright (c) 2011-2020 ETH Zurich.
import { exec } from 'child_process';
/**
 * Contains helpers providing functionality common to all platforms.
 * In particular the following two options are used:
 * - the JAVA_HOME environment variable
 * - Java on the PATH.
 */
export default function commonFindJavaHome() {
    return Promise.all([getJavaHomeEnvVar(), getJavaFromPath()])
        .then(flatten);
}
function getJavaHomeEnvVar() {
    if (process.env.JAVA_HOME) {
        return Promise.resolve([process.env.JAVA_HOME]);
    }
    else {
        return Promise.resolve([]);
    }
}
function getJavaFromPath() {
    return new Promise(resolve => {
        exec('java -XshowSettings:properties -version', (err, stdout, stderr) => {
            const java_home_line = stderr.toString().trim().split("\n")
                .find((line) => line.indexOf("java.home") != -1);
            if (java_home_line == null) {
                resolve([]);
            }
            else {
                const home = java_home_line.split("=")[1].trim();
                resolve([home]);
            }
        });
    });
}
export function flatten(matrix) {
    if (matrix == null) {
        return [];
    }
    return matrix.reduce((prevVal, curVal) => {
        return prevVal.concat(curVal);
    }, []);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvbGliL3BsYXRmb3Jtcy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSwyREFBMkQ7QUFDM0QsRUFBRTtBQUNGLHNDQUFzQztBQUV0QyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRW5DOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sVUFBVSxrQkFBa0I7SUFDeEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1NBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuQixDQUFDO0FBRUQsU0FBUyxpQkFBaUI7SUFDeEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUN6QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVUsQ0FBQyxDQUFDLENBQUM7S0FDbEQ7U0FBTTtRQUNMLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM1QjtBQUNILENBQUM7QUFFRCxTQUFTLGVBQWU7SUFDdEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMzQixJQUFJLENBQUMseUNBQXlDLEVBQUUsQ0FBQyxHQUFpQixFQUFFLE1BQXVCLEVBQUUsTUFBdUIsRUFBRSxFQUFFO1lBQ3RILE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2lCQUN4RCxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRCxJQUFJLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNiO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2pELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDakI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUksTUFBYTtJQUN0QyxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbEIsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQVksRUFBRSxNQUFXLEVBQUUsRUFBRTtRQUNqRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbi8vIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXNcbi8vIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDExLTIwMjAgRVRIIFp1cmljaC5cblxuaW1wb3J0IHtleGVjfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuLyoqXG4gKiBDb250YWlucyBoZWxwZXJzIHByb3ZpZGluZyBmdW5jdGlvbmFsaXR5IGNvbW1vbiB0byBhbGwgcGxhdGZvcm1zLlxuICogSW4gcGFydGljdWxhciB0aGUgZm9sbG93aW5nIHR3byBvcHRpb25zIGFyZSB1c2VkOlxuICogLSB0aGUgSkFWQV9IT01FIGVudmlyb25tZW50IHZhcmlhYmxlXG4gKiAtIEphdmEgb24gdGhlIFBBVEguXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbW1vbkZpbmRKYXZhSG9tZSgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIHJldHVybiBQcm9taXNlLmFsbChbZ2V0SmF2YUhvbWVFbnZWYXIoKSwgZ2V0SmF2YUZyb21QYXRoKCldKVxuICAgIC50aGVuKGZsYXR0ZW4pO1xufVxuXG5mdW5jdGlvbiBnZXRKYXZhSG9tZUVudlZhcigpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGlmIChwcm9jZXNzLmVudi5KQVZBX0hPTUUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtwcm9jZXNzLmVudi5KQVZBX0hPTUUhXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SmF2YUZyb21QYXRoKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGV4ZWMoJ2phdmEgLVhzaG93U2V0dGluZ3M6cHJvcGVydGllcyAtdmVyc2lvbicsIChlcnI6IEVycm9yIHwgbnVsbCwgc3Rkb3V0OiBCdWZmZXIgfCBzdHJpbmcsIHN0ZGVycjogQnVmZmVyIHwgc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBqYXZhX2hvbWVfbGluZSA9IHN0ZGVyci50b1N0cmluZygpLnRyaW0oKS5zcGxpdChcIlxcblwiKVxuICAgICAgICAuZmluZCgobGluZSkgPT4gbGluZS5pbmRleE9mKFwiamF2YS5ob21lXCIpICE9IC0xKTtcbiAgICAgIGlmIChqYXZhX2hvbWVfbGluZSA9PSBudWxsKSB7XG4gICAgICAgIHJlc29sdmUoW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaG9tZSA9IGphdmFfaG9tZV9saW5lLnNwbGl0KFwiPVwiKVsxXS50cmltKCk7XG4gICAgICAgIHJlc29sdmUoW2hvbWVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KG1hdHJpeDogVFtdW10pOiBUW10ge1xuICBpZiAobWF0cml4ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIG1hdHJpeC5yZWR1Y2UoKHByZXZWYWw6IFRbXSwgY3VyVmFsOiBUW10pID0+IHtcbiAgICByZXR1cm4gcHJldlZhbC5jb25jYXQoY3VyVmFsKTtcbiAgfSwgW10pO1xufVxuIl19